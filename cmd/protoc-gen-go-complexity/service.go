package main

import "google.golang.org/protobuf/compiler/protogen"

const (
	contextPackage = protogen.GoImportPath("context")
	grpcPackage    = protogen.GoImportPath("google.golang.org/grpc")
	codesPackage   = protogen.GoImportPath("google.golang.org/grpc/codes")
	statusPackage  = protogen.GoImportPath("google.golang.org/grpc/status")
)

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_complexity.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-grpc. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	for _, service := range file.Services {
		g.P("type " + service.GoName + "Complexity interface{")
		for _, method := range service.Methods {
			g.P(methodSignature(g, method))
		}
		g.P("}")
	}

	return g
}

func methodSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	s := method.GoName + "(ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context"))
	if !method.Desc.IsStreamingClient() {
		s += ", in *" + g.QualifiedGoIdent(method.Input.GoIdent)
	}
	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		s += ", out *" + g.QualifiedGoIdent(method.Output.GoIdent)
	} else {
		s += ", stream " + method.Parent.GoName + "_" + method.GoName + "Client"
	}
	s += ", err error"
	s += ", opts ..." + g.QualifiedGoIdent(grpcPackage.Ident("CallOption")) + ") int"
	return s
}
